# -*- coding: utf-8 -*-
"""Chocolate EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10QNN28WwB9AIzjbkhwygy5OWhHtjR8wg
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import holoviews as hv
from holoviews import opts
import warnings

CH = pd.read_csv("Chocolate Sales.csv")

CH.head(5)

CH.tail(5)

CH.shape

CH.describe()

CH.info()

CH.value_counts()

CH.isnull().sum()

"""-- EDA --

"""

CH.corr

# Find Out the best in location!
pivot_table = CH.pivot_table(index='Country', columns='Product', values='Amount', aggfunc='sum', fill_value=0)

plt.figure(figsize=(12, 8))
sns.heatmap(pivot_table, annot=False, cmap='Blues')
plt.xlabel("Chocolate Category")
plt.ylabel("Country")
plt.title("Total Sales by Country and Chocolate Category")
plt.tight_layout()
plt.show()

# Group by 'Sales Person' and sum the amounts.
sales_by_person = CH.groupby('Sales Person')['Amount'].sum().reset_index()

# Identify the Best Seller.
best_seller = sales_by_person.loc[sales_by_person['Amount'].idxmax(), 'Sales Person']

# Highlight the Best Seller.
colors = ['red' if person == best_seller else 'skyblue' for person in sales_by_person['Sales Person']]

# Plot the results.
plt.figure(figsize=(12, 6))
sns.barplot(data=sales_by_person, x='Sales Person', y='Amount', palette=colors)
plt.xlabel("Sales Person")
plt.ylabel("Total Sales ($)")
plt.title("Sales by Person")
plt.tight_layout()
plt.xticks(rotation=45, fontsize=8);
plt.show()

plt.figure(figsize=(10, 6))

sns.countplot(data=CH,x='Country')

plt.figure(figsize=(12,6))
sns.countplot(data=CH,x=CH['Product'])
plt.xticks(rotation=45, ha='right')
plt.show()

plt.figure(figsize=(12,6))
plt.title('Product vs Amount')
sns.barplot(data=CH,x='Product',y="Amount")
plt.xticks(rotation=45, ha='right')
plt.show()

plt.figure(figsize=(12, 6))
sns.lineplot(data=CH, x='Date', y='Amount')
plt.xlabel("Date")
plt.ylabel("Amount")
plt.title("Sales Amount Over Time")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# prompt: Create a comapering plot between products and contry

# Assuming 'CH' DataFrame is already loaded as in the provided code.

plt.figure(figsize=(12, 6))
sns.barplot(data=CH, x='Country', y='Amount', hue='Product')
plt.xlabel("Country")
plt.ylabel("Total Amount")
plt.title("Total Amount by Country and Product")
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

fig = px.bar(CH, x='Country', y='Amount', color='Product',
             title='Total Amount by Country and Product',
             labels={'Amount': 'Total Amount', 'Country': 'Country', 'Product': 'Product'},
             hover_data=['Date', 'Sales Person']) # Added hover data for more information
fig.update_layout(xaxis={'categoryorder':'total descending'}) # Order countries by total sales
fig.show()

numeric_columns = ['Amount', 'Boxes Shipped']

# Distribution with Histograms.
for col in numeric_columns:
    plt.figure(figsize=(12, 6))
    sns.histplot(CH[col], kde=True)
    plt.xlabel(col)
    plt.ylabel("Frequency")
    plt.title(f"Distribution of {col}")
    plt.tight_layout()
    plt.show()

# Distribution with Boxen and Violin Plots.
for col in numeric_columns:
    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    sns.boxenplot(y=CH[col], ax=ax[0])
    ax[0].set_title(f"Boxen Plot of {col}")
    sns.violinplot(y=CH[col], ax=ax[1])
    ax[1].set_title(f"Violin Plot of {col}")
    plt.tight_layout()
    plt.show()

# Convert 'Date' Column to datetime format
CH['Date'] = pd.to_datetime(CH['Date'], format='%d-%b-%y')

# # Group the data by month and sum the sales amounts
sales_time = CH.groupby(pd.Grouper(key='Date', freq='M'))['Amount'].sum().reset_index()

# Plot the sales trend over time
plt.figure(figsize=(12, 6))
sns.lineplot(data=sales_time, x='Date', y='Amount', marker='o')
plt.xlabel("Date")
plt.ylabel("Total Sales ($)")
plt.title("Sales Trend Over Time")
plt.tight_layout()
plt.show()

hv.extension('bokeh')

unique_labels = list(set(CH['Country']).union(set(CH['Sales Person'])))
label_map = {label: i for i, label in enumerate(unique_labels)}

links = [(label_map[row['Country']], label_map[row['Sales Person']], row['Amount']) for _, row in CH.iterrows()]

nodes = hv.Dataset(pd.DataFrame({'index': list(label_map.values()), 'label': list(label_map.keys())}), 'index')

chord = hv.Chord((links, nodes)).opts(
    opts.Chord(labels='label', cmap='Category20', edge_cmap='viridis', edge_color='Amount', node_color='index', node_size=20, width=800, height=800)
)

chord

"""-- Modeling Building --"""







